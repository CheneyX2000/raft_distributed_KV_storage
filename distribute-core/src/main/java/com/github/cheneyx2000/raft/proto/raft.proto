syntax="proto2";

package raft;
option java_package = "main.java.raft.proto";
option java_outer_classname = "RaftProto";

enum ResCode {
    RES_CODE_SUCCESS = 0;
    RES_CODE_FAIL = 1;
    RES_CODE_NOT_LEADER = 2;
};

enum EntryType {
    ENTRY_TYPE_DATA = 0;  // data log
    ENTRY_TYPE_CONFIGURATION= 1;  // config log 
};

message Endpoint {
    optional string host = 1;
    optional uint32 port = 2;
};

message Server {
    optional uint32 server_id = 1;
    optional Endpoint endpoint = 2;
};

message Configuration {
    repeated Server servers = 1;
};

message LogMetaData {
    optional uint64 current_term = 1;
    optional uint32 voted_for = 2;   // whom to vote in the current term
    optional uint64 first_log_index = 3;  // the index of the first log
    optional uint64 commit_index = 4;  // the highest index of the committed log
};

message SnapshotMetaData {
    optional uint64 last_included_index = 1;  // the last log index the snapshot has
    optional uint64 last_included_term = 2;  // the last term the snapshot has
    optional Configuration configuration = 3;  // the clust config when the snapshot happens
};

message LogEntry {
    optional uint64 term = 1;
    optional uint64 index = 2;
    optional EntryType type = 3;
    optional bytes data = 4;
};

message VoteRequest {
    optional uint32 server_id = 1; // candidate ID of who requests the vote
    optional uint64 term = 2; // the term of the candidate
    optional uint64 last_log_term = 3; // the term of the last log entry of the candidate
    optional uint64 last_log_index = 4; // the index of the last log entry of the candidate
};

message VoteResponse {
    optional uint64 term = 1; // current term, so that candidate can update its term
    optional bool granted = 2; // true when candidate wins this vote
};

message AppendEntriesRequest {
    optional uint32 server_id = 1; // leader's ID
    optional uint64 term = 2; // leader's term
    optional uint64 prev_log_index = 3; // new log entry follows the prev index
    optional uint64 prev_log_term = 4; // the term of prev_log_index
    optional uint64 commit_index = 5; // the index that the leader has committed
    repeated LogEntry entries = 6; // the log entries that is ready to be stored (empty when representing heartbeat)
};

message AppendEntriesResponse {
    optional ResCode res_code = 1; // true when follower has the log that matches prevLogIndex and preLogIndex
    optional uint64 term = 2; // current term for leader to renew itself
    optional uint64 last_log_index = 3;  // the last log index of the follower
};

// when follower is too far-behind, sending snapshot to the follower is more efficient than sending all logs
message InstallSnapshotRequest {
    optional uint32 server_id = 1;  // leader's ID
    optional uint64 term = 2;  // leader's term
    optional SnapshotMetaData snapshot_meta_data = 3;  // meta data of the snapshot
    optional string file_name = 4;  // the file name of the snapshot
    optional uint64 offset = 5;
    optional bytes data = 6;
    optional bool is_first = 7;  // if is the first data block
    optional bool is_last = 8;  // if is the last data block
};

message InstallSnapshotResponse {
    optional ResCode res_code = 1;
    optional uint64 term = 2;  // the current term of the follower
};

// query for the current leader
message GetLeaderRequest {
};

message GetLeaderResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
    optional Endpoint leader = 3;
};

// add a new peer node to the cluster
message AddPeersRequest {
    repeated Server servers = 1;  // the list of servers that is going to be added
};

message AddPeersResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
}

// remove an existing peer node from the cluster
message RemovePeersRequest {
    repeated Server servers = 1;  // the list of servers that is going to be removed
};

message RemovePeersResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
};

// get the current config of the cluster
message GetConfigurationRequest {
};

message GetConfigurationResponse {
    optional ResCode res_code = 1;
    optional string res_msg = 2;
    optional Server leader = 3;  // current leader ID
    repeated Server servers = 4;  // all nodes in the cluster
};

// get the commit index of the leader
message GetLeaderCommitIndexRequest {
};

message GetLeaderCommitIndexResponse {
    optional uint64 commit_index = 1;
};
